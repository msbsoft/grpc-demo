version: '3.8'

services:
  # gRPC Server Service
  grpc-server:
    build:
      context: .
      dockerfile: GrpcService1/Dockerfile
    container_name: grpc-demo-server
    ports:
      - "8080:8080"  # Expose server port to host
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_HTTP_PORTS=8080
    networks:
      - grpc-network
    # Health check to ensure server is ready before client starts
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Resource limits for production-like constraints
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # gRPC Client Service
  grpc-client:
    build:
      context: .
      dockerfile: grpc-client/ConsoleApp1/Dockerfile
    container_name: grpc-demo-client
    environment:
      - GRPC_SERVER_ADDRESS=http://grpc-server:8080
    networks:
      - grpc-network
    depends_on:
      grpc-server:
        condition: service_healthy  # Wait for server health check to pass
    # Resource limits for the client
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# Custom network for service communication
networks:
  grpc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16